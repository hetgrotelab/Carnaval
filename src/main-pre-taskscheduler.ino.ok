#include <Arduino.h>

#include <UTFT.h>
#include <URTouch.h>
#include <UTFT_Buttons.h>

#include <Wire.h> // must be included before RtcDS3231.h so that Arduino library object file references work
#include <RtcDS3231.h>
RtcDS3231<TwoWire> Rtc(Wire);

// Used in Time and Date functions
#define countof(a) (sizeof(a) / sizeof(a[0]))

RtcDateTime epochPartyTime = RtcDateTime("Feb 23 2020", "11:11:11");

extern uint8_t BigFont[];
extern uint8_t SevenSegNumFont[];
extern uint8_t SmallFont[];

UTFT myGLCD(ITDB32S, 38, 39, 40, 41);
// a 3.2 inch TFT LCD Screen module, 320*240 (resolution), 65K color
URTouch myTouch(6,5,4,3,2);
UTFT_Buttons myButtons(&myGLCD, &myTouch);

int x, y;
int but1,but2,but3,but4,but5,but6,but7,but8,but9,but10,start1, start2,start3,start4, butClr, butEnt, pressed_button;
char stCurrent[10] = "";
int stCurrentLen = 0;
char stLast[10] = "";

int itemNr = 0;
// spreuken aantal en spreukenNr gelijk houden
int spreukenNr = 6;
String spreuken[6] =
{
  "Tot CARNAVAL 2020",
  "Carnaval in Oeteldonk",
  "FF lekker onthaasten",
  "Het is schrikkeljaar !!",
  "Hendrien Rules!!",
  "Tot d'n hoogheid aonkomt"
};

/*
 * Functions
 */
String formatTime(const RtcDateTime& dt)
{
  char datestring[9];
  snprintf_P(datestring,
          countof(datestring),
          PSTR("%02u:%02u:%02u"),
          dt.Hour(),
          dt.Minute(),
          dt.Second() );
  return datestring;
}

String formatDate(const RtcDateTime& dt)
{
  char datestring[11];
  snprintf_P(datestring,
          countof(datestring),
          PSTR("%02u/%02u/%04u"),
          dt.Day(),
          dt.Month(),
          dt.Year() );
  return datestring;
}

void vlagOeteldonk()
{
  myGLCD.setColor(255,0,0);
  myGLCD.fillRect(0,0,239,105);
  myGLCD.setColor(255,255,255);
  myGLCD.fillRect(0,106,239,212);
  myGLCD.setColor(255,255,0);
  myGLCD.fillRect(0,213,239,319);
}

void dagenText()
{
  myGLCD.setBackColor(255,0,0);
  myGLCD.setColor(255,255,255);
  myGLCD.setFont(BigFont);
  myGLCD.print(F("NOG"), CENTER, 45);
}

void displayTimeDate()
{
  myGLCD.setBackColor(255,0,0);
  myGLCD.setColor(255,255,255);
  myGLCD.setFont(SmallFont);

  RtcDateTime now = Rtc.GetDateTime();

  myGLCD.print(formatDate(now), LEFT, 0);
  myGLCD.print(formatTime(now), CENTER, 0);
}

void displayTemp()
{
  myGLCD.setBackColor(255,0,0);
  myGLCD.setColor(255,255,255);
  myGLCD.setFont(SmallFont);

  RtcTemperature temp = Rtc.GetTemperature();
  String currentTemp = String(temp.AsFloatDegC()) + "C";
  myGLCD.print(currentTemp, RIGHT, 0);
}

void displayTimeUntilPartyDays()
{
  RtcDateTime now = Rtc.GetDateTime();
  int32_t daysToGo = ((epochPartyTime - now) / 86400);  // Devide by one day

  myGLCD.setBackColor(255,255,255);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(SevenSegNumFont);
  myGLCD.print(String(daysToGo), CENTER, 132);

  myGLCD.setBackColor(255,255,0);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(BigFont);
  myGLCD.print(F("DAGEN"), CENTER, 240);
}

void displayTimeUntilPartyHours()
{
  RtcDateTime now = Rtc.GetDateTime();
  int32_t hoursToGo = ((epochPartyTime - now) / 3600);  // Devide by one hour

  myGLCD.setBackColor(255,255,255);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(SevenSegNumFont);
  myGLCD.print(String(hoursToGo), CENTER, 132);

  myGLCD.setBackColor(255,255,0);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(BigFont);
  myGLCD.print(F("UUR"), CENTER, 240);
}

void displayTimeUntilPartySeconds()
{
  RtcDateTime now = Rtc.GetDateTime();
  //int32_t daysToGo = ((epochPartyTime - now) % 86400);  // remainder in seconds
  int32_t secondsToGo = (epochPartyTime - now);

  myGLCD.setBackColor(255,255,255);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(SevenSegNumFont);
  myGLCD.print(String(secondsToGo), CENTER, 132);

  myGLCD.setBackColor(255,255,0);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(BigFont);
  myGLCD.print(F("Seconden"), CENTER, 240);
}

void bannerTextNext()
{
  myGLCD.setBackColor(255,255,0);
  myGLCD.setColor(0,0,0);
  myGLCD.setFont(SmallFont);
  myGLCD.print(F("                            "), CENTER, 290);

  myGLCD.print(spreuken[itemNr], CENTER, 290);

  itemNr = ((itemNr + 1) % spreukenNr);
}

void rtcCheck()
{
  if (!Rtc.IsDateTimeValid())
  {
    if (Rtc.LastError() != 0)
    {
      Serial.print(F("RTC communications error = "));
      Serial.println(Rtc.LastError());
    }
    else
    {
      Serial.println(F("RTC lost confidence in the DateTime!"));
    }
  }
}

/**********************************************************************
 * Setup
 **********************************************************************/
void setup()
{
  Serial.begin(115200);

  Serial.print(F("Compiled at: "));
  Serial.print(__DATE__);
  Serial.print(F(" "));
  Serial.println(__TIME__);

  Rtc.Begin();
  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  int32_t compiledCorrected = compiled + 5;

  if (!Rtc.IsDateTimeValid())
  {
    if (Rtc.LastError() != 0)
    {
      Serial.print(F("RTC communications error = "));
      Serial.println(Rtc.LastError());
    }
    else
    {
      Serial.println(F("RTC lost confidence in the DateTime!"));
      Rtc.SetDateTime(compiledCorrected);
    }
  }

  if (!Rtc.GetIsRunning())
  {
    Serial.println(F("RTC was not actively running, starting now"));
    Rtc.SetIsRunning(true);
  }

  RtcDateTime now = Rtc.GetDateTime();

  if (now < compiledCorrected)
  {
    Serial.println(F("RTC is older than compile time!  (Updating DateTime)"));
    Rtc.SetDateTime(compiledCorrected);
  }
  else if (now > compiledCorrected)
  {
    Serial.println(F("RTC is newer than compile time. (this is expected)"));
  }
  else if (now == compiledCorrected)
  {
    Serial.println(F("RTC is the same as compile time! (not expected but all is fine)"));
  }
  // never assume the Rtc was last configured by you, so
  // just clear them to your needed state
  Rtc.Enable32kHzPin(false);
  Rtc.SetSquareWavePin(DS3231SquareWavePin_ModeNone);

  myTouch.InitTouch(PORTRAIT);
  myTouch.setPrecision(PREC_MEDIUM);

  myGLCD.InitLCD(PORTRAIT);
  myGLCD.clrScr();

  now = Rtc.GetDateTime();

  Serial.print("Now: ");
  Serial.println(now);
  Serial.print("Epoch partytime: ");
  Serial.println(epochPartyTime);
  Serial.print("Seconds to partytime: ");
  Serial.println(epochPartyTime - now);

  vlagOeteldonk();
  dagenText();

}

/**********************************************************************
 * Main loop
 **********************************************************************/
void loop()
{
  rtcCheck();
  displayTimeUntilPartyDays();
  //displayTimeUntilPartyHours();
  //displayTimeUntilPartySeconds();
  bannerTextNext();

  displayTemp();
  displayTimeDate();

  delay(1000);
}
